diff --git a/src/glow.js b/src/glow.js
index 050552f27c69bb4e5a412a66c3407e2bb9698f52..6177d80fd483d59e4b8e186eef9570e1ccf93d54 100644
--- a/src/glow.js
+++ b/src/glow.js
@@ -186,7 +186,7 @@ function renderString(str) {
 
 
 // exported for testing purposes
-export function renderRow(row, lang) {
+export function renderRow(row, lang, mark=true) {
   if (!row) return ''
 
   const els = parseRow(row, lang)
@@ -211,8 +211,9 @@ export function renderRow(row, lang) {
   }
 
   ret.push(row.substring(index))
+  const res = ret.join('')
 
-  return ret.join('').replace(MARK, (_, a, b, c) => {
+  return !mark ? res : res.replace(MARK, (_, a, b, c) => {
     return elem(a[1] ? 'u' : 'mark',  b)
   })
 }
@@ -221,7 +222,7 @@ export function renderRow(row, lang) {
 // comment start & end
 const COMMENT = [/(\/\*|^ *{# |<!--|'''|=begin)/, /(\*\/|#}|-->|'''|=end)$/]
 
-export function parseSyntax(str, lang) {
+export function parseSyntax(str, lang, prefix=true) {
   const [comm_start, comm_end] = COMMENT
   const lines = []
 
@@ -242,7 +243,7 @@ export function parseSyntax(str, lang) {
 
         // highlighted line
         const c = line[0]
-        const wrap = isMD(lang) ? (c == '|' && 'dfn') : PREFIXES[c]
+        const wrap = !prefix ? false : isMD(lang) ? (c == '|' && 'dfn') : PREFIXES[c]
         if (wrap) line = (line[1] == ' ' ? ' ' : '') + line.slice(1)
 
         // escape character
@@ -263,7 +264,7 @@ export function parseSyntax(str, lang) {
 
 
 // code, { language: 'js', numbered: true }
-export function glow(str, opts={}) {
+export function glow(str, opts={ mark: true, prefix: true }) {
   if (typeof opts == 'string') opts = { language: opts }
 
   // language
@@ -275,7 +276,7 @@ export function glow(str, opts={}) {
     lines.push(opts.numbered ? elem('span', line) : line)
   }
 
-  parseSyntax(str.trim(), lang).forEach(function(block) {
+  parseSyntax(str.trim(), lang, opts.prefix).forEach(function(block) {
     let { line, comment, wrap } = block
 
     // EOL comment
@@ -283,7 +284,7 @@ export function glow(str, opts={}) {
       return comment.forEach(el => push(elem('sup', encode(el))))
 
     } else {
-      line = renderRow(line, lang)
+      line = renderRow(line, lang, opts.mark)
     }
 
     if (wrap) line = elem(wrap, line)
