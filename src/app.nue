<script>
  import { glow } from './glow.js'
</script>


<main @name="app">
  <filelist />
  <editor />
  <viewer />
</main>


<section @name="filelist">
  <div>
    <button @click="openDir">Open project root</button>
  </div>
  <nav>
    <listing :tree />
  </nav>

  <script>
    tree = {
      name: 'test',
      dirs: [
        {
          name: 'dir',
          dirs: [{ name: 'subdir' }],
          files: [{ name: '.gitignore' }]
        },
        { name: 'stuff' }
      ],
      files: [{ name: 'lol.txt' }]
    }
    async openDir() {
      this.handle = await showDirectoryPicker({ mode: 'readwrite' })
    }
  </script>
</section>


<section @name="editor" class="editor">
  <textarea id="editor" ref="editor" @keydown="checkTab" @keyup="changed" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"></textarea>
  <pre id="highlighted" ref="highlighted" aria-hidden="true" glow></pre>

  <script>
    // TODO: match scroll position

    lang = 'html'
    spaceStarter = /^(\s*)/
    spaceEnder = /(\s*)$/

    changed() {
      const text = this.$refs.editor.value

      const spaceStart = this.spaceStarter.exec(text)[1] ?? ''
      const spaceEnd = this.spaceEnder.exec(text)[1]

      this.$refs.highlighted.innerHTML = `${spaceStart}${glow(text, { language: this.lang })}${spaceEnd ? spaceEnd + '<wbr />' : ''}`
    }

    checkTab(e) {
      const editor = this.$refs.editor
      
      // https://css-tricks.com/creating-an-editable-textarea-that-supports-syntax-highlighted-code/
      if (e.key == 'Tab') {
        e.preventDefault()

        let cursorPos = editor.selectionEnd + 1
        editor.value = [
          editor.value.slice(0, editor.selectionStart),
          editor.value.slice(editor.selectionEnd, editor.value.length)
        ].join('\t')

        // move cursor
        editor.selectionStart = cursorPos
        editor.selectionEnd = cursorPos
        this.changed()
      }
    }
  </script>
</section>


<section @name="viewer">
  <form @submit.prevent="openUrl">
    <input type="url" ref="urlbar" :value="url">
    <button>Open</button>
  </form>
  <iframe :src="url" frameborder="0" ref="webview"></iframe>

  <script>
    openUrl() {
      this.url = this.$refs.urlbar.value
    }

    constructor({ origin="http://localhost:8080", pth='' }) {
      this.url = new URL(pth, origin).toString()
      addEventListener('message', ({ data }) => this.$refs.urlbar.value = data)
    }
  </script>
</section>


<details @name="listing" open>
  <summary>{tree  .name}</summary>
  <listing :for="d in tree.dirs" :tree="d" :if="tree.dirs.length" />
  <a href="#" :for="t in tree.files" :if="tree.files.length">{t.name}</a>
</details>
